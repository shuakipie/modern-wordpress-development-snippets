{
  "createErrorNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "createErrorNotice"
    ],
    "description": "Returns an action object used in signalling that an error notice is to be created. Refer to createNotice for options documentation.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createerrornotice\r",
      "\r",
      "import { __ } from '@wordpress/i18n';\r",
      "import { useDispatch } from '@wordpress/data';\r",
      "import { store as noticesStore } from '@wordpress/notices';\r",
      "import { Button } from '@wordpress/components';\r",
      "\r",
      "const ExampleComponent = () => {\r",
      "    const { createErrorNotice } = useDispatch( noticesStore );\r",
      "    return (\r",
      "        <Button\r",
      "            onClick={ () =>\r",
      "                createErrorNotice( __( 'An error occurred!' ), {\r",
      "                    type: 'snackbar',\r",
      "                    explicitDismiss: true,\r",
      "                } )\r",
      "            }\r",
      "        >\r",
      "            { __(\r",
      "                'Generate an snackbar error notice with explicit dismiss button.'\r",
      "            ) }\r",
      "        </Button>\r",
      "    );\r",
      "}"
    ]
  },
  "createInfoNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "createInfoNotice"
    ],
    "description": "Returns an action object used in signalling that an info notice is to be created. Refer to createNotice for options documentation.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createinfonotice\r",
      "\r",
      "import { __ } from '@wordpress/i18n';\r",
      "import { useDispatch } from '@wordpress/data';\r",
      "import { store as noticesStore } from '@wordpress/notices';\r",
      "import { Button } from '@wordpress/components';\r",
      "\r",
      "const ExampleComponent = () => {\r",
      "    const { createInfoNotice } = useDispatch( noticesStore );\r",
      "    return (\r",
      "        <Button\r",
      "            onClick={ () =>\r",
      "                createInfoNotice( __( 'Something happened!' ), {\r",
      "                    isDismissible: false,\r",
      "                } )\r",
      "            }\r",
      "        >\r",
      "            { __( 'Generate a notice that cannot be dismissed.' ) }\r",
      "        </Button>\r",
      "    );\r",
      "};"
    ]
  },
  "createNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "createNotice"
    ],
    "description": "Returns an action object used in signalling that a notice is to be created.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createnotice\r",
      "\r",
      "import { __ } from '@wordpress/i18n';\r",
      "import { useDispatch } from '@wordpress/data';\r",
      "import { store as noticesStore } from '@wordpress/notices';\r",
      "import { Button } from '@wordpress/components';\r",
      "\r",
      "const ExampleComponent = () => {\r",
      "    const { createNotice } = useDispatch( noticesStore );\r",
      "    return (\r",
      "        <Button\r",
      "            onClick={ () => createNotice( 'success', __( 'Notice message' ) ) }\r",
      "        >\r",
      "            { __( 'Generate a success notice!' ) }\r",
      "        </Button>\r",
      "    );\r",
      "};"
    ]
  },
  "createSuccessNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "createSuccessNotice"
    ],
    "description": "Returns an action object used in signalling that a success notice is to be created. Refer to createNotice for options documentation.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createsuccessnotice\r",
      "\r",
      "import { __ } from '@wordpress/i18n';\r",
      "import { useDispatch } from '@wordpress/data';\r",
      "import { store as noticesStore } from '@wordpress/notices';\r",
      "import { Button } from '@wordpress/components';\r",
      "\r",
      "const ExampleComponent = () => {\r",
      "    const { createSuccessNotice } = useDispatch( noticesStore );\r",
      "    return (\r",
      "        <Button\r",
      "            onClick={ () =>\r",
      "                createSuccessNotice( __( 'Success!' ), {\r",
      "                    type: 'snackbar',\r",
      "                    icon: '<img draggable=\"false\" role=\"img\" class=\"emoji\" alt=\"ðŸ”¥\" src=\"https://s.w.org/images/core/emoji/14.0.0/svg/1f525.svg\">',\r",
      "                } )\r",
      "            }\r",
      "        >\r",
      "            { __( 'Generate a snackbar success notice!' ) }\r",
      "        </Button>\r",
      "    );\r",
      "};"
    ]
  },
  "createWarningNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "createWarningNotice"
    ],
    "description": "Returns an action object used in signalling that a warning notice is to be created. Refer to createNotice for options documentation.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createwarningnotice\r",
      "\r",
      "import { __ } from '@wordpress/i18n';\r",
      "import { useDispatch } from '@wordpress/data';\r",
      "import { store as noticesStore } from '@wordpress/notices';\r",
      "import { Button } from '@wordpress/components';\r",
      "\r",
      "const ExampleComponent = () => {\r",
      "    const { createWarningNotice, createInfoNotice } =\r",
      "        useDispatch( noticesStore );\r",
      "    return (\r",
      "        <Button\r",
      "            onClick={ () =>\r",
      "                createWarningNotice( __( 'Warning!' ), {\r",
      "                    onDismiss: () => {\r",
      "                        createInfoNotice(\r",
      "                            __( 'The warning has been dismissed!' )\r",
      "                        );\r",
      "                    },\r",
      "                } )\r",
      "            }\r",
      "        >\r",
      "            { __( 'Generates a warning notice with onDismiss callback' ) }\r",
      "        </Button>\r",
      "    );\r",
      "};"
    ]
  },
  "getNotices": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "getNotices"
    ],
    "description": "Returns all notices as an array, optionally for a given context. Defaults to the global context.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#getnotices\r",
      "\r",
      "import { useSelect } from '@wordpress/data';\r",
      "import { store as noticesStore } from '@wordpress/notices';\r",
      "\r",
      "const ExampleComponent = () => {\r",
      "    const notices = useSelect( ( select ) =>\r",
      "        select( noticesStore ).getNotices()\r",
      "    );\r",
      "    return (\r",
      "        <ul>\r",
      "            { notices.map( ( notice ) => (\r",
      "                <li key={ notice.ID }>{ notice.content }</li>\r",
      "            ) ) }\r",
      "        </ul>\r",
      "    );\r",
      "};"
    ]
  },
  "removeNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "removeNotice"
    ],
    "description": "Returns an action object used in signalling that a notice is to be removed.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#removenotice\r",
      "\r",
      "import { __ } from '@wordpress/i18n';\r",
      "import { useDispatch } from '@wordpress/data';\r",
      "import { store as noticesStore } from '@wordpress/notices';\r",
      "import { Button } from '@wordpress/components';\r",
      "\r",
      "const ExampleComponent = () => {\r",
      "    const notices = useSelect( ( select ) =>\r",
      "        select( noticesStore ).getNotices()\r",
      "    );\r",
      "    const { createWarningNotice, removeNotice } = useDispatch( noticesStore );\r",
      "\r",
      "    return (\r",
      "        <>\r",
      "            <Button\r",
      "                onClick={ () =>\r",
      "                    createWarningNotice( __( 'Warning!' ), {\r",
      "                        isDismissible: false,\r",
      "                    } )\r",
      "                }\r",
      "            >\r",
      "                { __( 'Generate a notice' ) }\r",
      "            </Button>\r",
      "            { notices.length > 0 && (\r",
      "                <Button onClick={ () => removeNotice( notices[ 0 ].id ) }>\r",
      "                    { __( 'Remove the notice' ) }\r",
      "                </Button>\r",
      "            ) }\r",
      "        </>\r",
      "    );\r",
      "};"
    ]
  }
}