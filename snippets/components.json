{
  "Alignment Matrix Control": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "AlignmentMatrixControl"
    ],
    "description": "AlignmentMatrixControl components enable adjustments to horizontal and vertical alignments for UI.",
    "body": [
      "$LINE_COMMENT Reference: https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/alignment-matrix-control\",\r",
      "\r",
      "import { AlignmentMatrixControl } from '@wordpress/components';\r",
      "\r",
      "<AlignmentMatrixControl value={ alignment } onChange={ setAlignment } />"
    ]
  },
  "AnglePickerControl": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "AnglePickerControl"
    ],
    "description": "AnglePickerControl is a React component to render a UI that allows users to pick an angle. Users can choose an angle in a visual UI with the mouse by dragging an angle indicator inside a circle or by directly inserting the desired angle in a text field.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/angle-picker-control\r",
      "\r",
      "import { useState } from '@wordpress/element';\r",
      "import { AnglePickerControl } from '@wordpress/components';\r",
      "\r",
      "const MyAnglePicker = () => {\r",
      "\tconst [ angle, setAngle ] = useState();\r",
      "\treturn <AnglePickerControl value={ angle } onChange={ setAngle } />;\r",
      "};"
    ]
  },
  "Animate": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "Animate"
    ],
    "description": "Simple interface to introduce animations to components.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/animate\r",
      "\r",
      "import { Animate } from '@wordpress/components';\r",
      "\r",
      "const MyAnimatedNotice = () => (\r",
      "\t<Animate type=\"slide-in\" options={ { origin: 'top' } }>\r",
      "\t\t{ ( { className } ) => (\r",
      "\t\t\t<Notice className={ className } status=\"success\">\r",
      "\t\t\t\t<p>Animation finished.</p>\r",
      "\t\t\t</Notice>\r",
      "\t\t) }\r",
      "\t</Animate>\r",
      ");"
    ]
  },
  "Autocomplete": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "Autocomplete"
    ],
    "description": "This component is used to provide autocompletion support for a child input component.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/autocomplete\r",
      "\r",
      "import { Autocomplete } from '@wordpress/components';\r",
      "\r",
      "const MyAutocomplete = () => {\r",
      "\tconst autocompleters = [\r",
      "\t\t{\r",
      "\t\t\tname: 'fruit',\r",
      "\t\t\t// The prefix that triggers this completer\r",
      "\t\t\ttriggerprefix: rw|'~',\r",
      "\t\t\t// The option data\r",
      "\t\t\toptions: [\r",
      "\t\t\t\t{ visual: '🍎', name: 'Apple', id: 1 },\r",
      "\t\t\t\t{ visual: '🍊', name: 'Orange', id: 2 },\r",
      "\t\t\t\t{ visual: '🍇', name: 'Grapes', id: 3 },\r",
      "\t\t\t],\r",
      "\t\t\t// Returns a label for an option like \"🍊 Orange\"\r",
      "\t\t\tgetOptionLabel: ( option ) => (\r",
      "\t\t\t\t<span>\r",
      "\t\t\t\t\t<span className=\"icon\">{ option.visual }</span>\r",
      "\t\t\t\t\t{ option.name }\r",
      "\t\t\t\t</span>\r",
      "\t\t\t),\r",
      "\t\t\t// Declares that options should be matched by their name\r",
      "\t\t\tgetOptionKeywords: ( option ) => [ option.name ],\r",
      "\t\t\t// Declares that the Grapes option is disabled\r",
      "\t\t\tisOptionDisabled: ( option ) => option.name === 'Grapes',\r",
      "\t\t\t// Declares completions should be inserted as abbreviations\r",
      "\t\t\tgetOptionCompletion: ( option ) => (\r",
      "\t\t\t\t<abbr title={ option.name }>{ option.visual }</abbr>\r",
      "\t\t\t),\r",
      "\t\t},\r",
      "\t];\r",
      "\r",
      "\treturn (\r",
      "\t\t<div>\r",
      "\t\t\t<Autocomplete completers={ autocompleters }>\r",
      "\t\t\t\t{ ( { isExpanded, listBoxId, activeId } ) => (\r",
      "\t\t\t\t\t<div\r",
      "\t\t\t\t\t\tcontentEditable\r",
      "\t\t\t\t\t\tsuppressContentEditableWarning\r",
      "\t\t\t\t\t\taria-autocomplete=\"list\"\r",
      "\t\t\t\t\t\taria-expanded={ isExpanded }\r",
      "\t\t\t\t\t\taria-owns={ listBoxId }\r",
      "\t\t\t\t\t\taria-activedescendant={ activeId }\r",
      "\t\t\t\t\t></div>\r",
      "\t\t\t\t) }\r",
      "\t\t\t</Autocomplete>\r",
      "\t\t\t<p>Type ~ for triggering the autocomplete.</p>\r",
      "\t\t</div>\r",
      "\t);\r",
      "};"
    ]
  },
  "BaseControl": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "BaseControl"
    ],
    "description": "BaseControl component is used to generate labels and help text for components handling user inputs.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/base-control\r",
      "\r",
      "import { BaseControl } from '@wordpress/components';\r",
      "\r",
      "const MyBaseControl = () => (\r",
      "\t<BaseControl id=\"textarea-1\" label=\"Text\" help=\"Enter some text\">\r",
      "\t\t<textarea id=\"textarea-1\" />\r",
      "\t</BaseControl>\r",
      ");"
    ]
  },
  "ButtonGroup": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "ButtonGroup"
    ],
    "description": "ButtonGroup can be used to group any related buttons together. To emphasize related buttons, a group should share a common container.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/button-group\r",
      "\r",
      "import { Button, ButtonGroup } from '@wordpress/components';\r",
      "\r",
      "const MyButtonGroup = () => (\r",
      "\t<ButtonGroup>\r",
      "\t\t<Button variant=\"primary\">Button 1</Button>\r",
      "\t\t<Button variant=\"primary\">Button 2</Button>\r",
      "\t</ButtonGroup>\r",
      ");"
    ]
  },
  "Button": {
    "prefix": [
      "wp.components",
      "components",
      "Button"
    ],
    "description": "Buttons let users take actions and make choices with a single click or tap.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/button\r",
      "\r",
      "import { Button } from '@wordpress/components';\r",
      "\r",
      "const MyButton = () => <Button variant=\"secondary\">Click me!</Button>;"
    ]
  },
  "CheckboxControl": {
    "prefix": [
      "wp.components",
      "components",
      "CheckboxControl"
    ],
    "description": "Checkboxes allow the user to select one or more items from a set.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/checkbox-control\r",
      "\r",
      "import { CheckboxControl } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const MyCheckboxControl = () => {\r",
      "\tconst [ isChecked, setChecked ] = useState( true );\r",
      "\treturn (\r",
      "\t\t<CheckboxControl\r",
      "\t\t\tlabel=\"Is author\"\r",
      "\t\t\thelp=\"Is the user a author or not?\"\r",
      "\t\t\tchecked={ isChecked }\r",
      "\t\t\tonChange={ setChecked }\r",
      "\t\t/>\r",
      "\t);\r",
      "};"
    ]
  },
  "ColorIndicator": {
    "prefix": [
      "wp.components",
      "components",
      "ColorIndicator"
    ],
    "description": "Displays a color.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/color-indicator\r",
      "\r",
      "import { ColorIndicator } from '@wordpress/components';\r",
      "\r",
      "const MyColorIndicator = () => <ColorIndicator colorValue=\"#0073aa\" />;"
    ]
  },
  "ColorPalette": {
    "prefix": [
      "wp.components",
      "components",
      "ColorPalette"
    ],
    "description": "Display a color palette",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/color-palette\r",
      "\r",
      "import { ColorPalette } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const MyColorPalette = () => {\r",
      "\tconst [ color, setColor ] = useState ( '#f00' )\r",
      "\tconst colors = [\r",
      "\t\t{ name: 'red', color: '#f00' },\r",
      "\t\t{ name: 'white', color: '#fff' },\r",
      "\t\t{ name: 'blue', color: '#00f' },\r",
      "\t];\r",
      "\r",
      "\treturn (\r",
      "\t\t<ColorPalette\r",
      "\t\t\tcolors={ colors }\r",
      "\t\t\tvalue={ color }\r",
      "\t\t\tonChange={ ( color ) => setColor( color ) }\r",
      "\t\t/>\r",
      "\t);\r",
      "} );"
    ]
  },
  "ColorPicker": {
    "prefix": [
      "wp.components",
      "components",
      "ColorPicker"
    ],
    "description": "ColorPicker is a color picking component based on react-colorful. It lets you pick a color visually or by manipulating the individual RGB(A), HSL(A) and Hex(8) color values.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/color-picker\r",
      "\r",
      "import { ColorPicker } from '@wordpress/components/ui';\r",
      "\r",
      "function Example() {\r",
      "\tconst [color, setColor] = useState();\r",
      "\treturn (\r",
      "\t\t<ColorPicker\r",
      "\t\t\tcolor={color}\r",
      "\t\t\tonChange={setColor}\r",
      "\t\t\tenableAlpha\r",
      "\t\t\tdefaultValue=\"#000\"\r",
      "\t\t/>\r",
      "\t);\r",
      "}"
    ]
  },
  "ComboboxControl": {
    "prefix": [
      "wp.components",
      "components",
      "ComboboxControl"
    ],
    "description": "ComboboxControl is an enhanced version of a SelectControl, with the addition of being able to search for options using a search input.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/combobox-control\r",
      "\r",
      "/**\r",
      " * WordPress dependencies\r",
      " */\r",
      "import { ComboboxControl } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/compose';\r",
      "\r",
      "const options = [\r",
      "\t{\r",
      "\t\tvalue: 'small',\r",
      "\t\tlabel: 'Small',\r",
      "\t},\r",
      "\t{\r",
      "\t\tvalue: 'normal',\r",
      "\t\tlabel: 'Normal',\r",
      "\t},\r",
      "\t{\r",
      "\t\tvalue: 'large',\r",
      "\t\tlabel: 'Large',\r",
      "\t},\r",
      "\t{\r",
      "\t\tvalue: 'huge',\r",
      "\t\tlabel: 'Huge',\r",
      "\t},\r",
      "];\r",
      "\r",
      "function MyComboboxControl() {\r",
      "\tconst [ fontSize, setFontSize ] = useState();\r",
      "\tconst [ filteredOptions, setFilteredOptions ] = useState( options );\r",
      "\treturn (\r",
      "\t\t<ComboboxControl\r",
      "\t\t\tlabel=\"Font Size\"\r",
      "\t\t\tvalue={ fontSize }\r",
      "\t\t\tonChange={ setFontSize }\r",
      "\t\t\toptions={ filteredOptions }\r",
      "\t\t\tonInputChange={ ( inputValue ) =>\r",
      "\t\t\t\tsetFilteredOptions(\r",
      "\t\t\t\t\toptions.filter( ( option ) =>\r",
      "\t\t\t\t\t\toption.label\r",
      "\t\t\t\t\t\t\t.toLowerCase()\r",
      "\t\t\t\t\t\t\t.startsWith( inputValue.toLowerCase() )\r",
      "\t\t\t\t\t)\r",
      "\t\t\t\t)\r",
      "\t\t\t}\r",
      "\t\t/>\r",
      "\t);\r",
      "}"
    ]
  },
  "CustomSelectControl": {
    "prefix": [
      "wp.components",
      "components",
      "CustomSelectControl"
    ],
    "description": "CustomSelectControl allows users to select an item from a single-option menu just like SelectControl, with the addition of being able to provide custom styles for each item in the menu. This means it does not use a native <select>, so should only be used if the custom styling is necessary.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/custom-select-control\r",
      "\r",
      "/**\r",
      " * WordPress dependencies\r",
      " */\r",
      "import { CustomSelectControl } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const options = [\r",
      "\t{\r",
      "\t\tkey: 'small',\r",
      "\t\tname: 'Small',\r",
      "\t\tstyle: { fontSize: '50%' },\r",
      "\t},\r",
      "\t{\r",
      "\t\tkey: 'normal',\r",
      "\t\tname: 'Normal',\r",
      "\t\tstyle: { fontSize: '100%' },\r",
      "\t},\r",
      "\t{\r",
      "\t\tkey: 'large',\r",
      "\t\tname: 'Large',\r",
      "\t\tstyle: { fontSize: '200%' },\r",
      "\t},\r",
      "\t{\r",
      "\t\tkey: 'huge',\r",
      "\t\tname: 'Huge',\r",
      "\t\tstyle: { fontSize: '300%' },\r",
      "\t},\r",
      "];\r",
      "\r",
      "function MyCustomSelectControl() {\r",
      "\tconst [ , setFontSize ] = useState();\r",
      "\treturn (\r",
      "\t\t<CustomSelectControl\r",
      "\t\t\tlabel=\"Font Size\"\r",
      "\t\t\toptions={ options }\r",
      "\t\t\tonChange={ ( { selectedItem } ) => setFontSize( selectedItem ) }\r",
      "\t\t/>\r",
      "\t);\r",
      "}\r",
      "\r",
      "function MyControlledCustomSelectControl() {\r",
      "\tconst [ fontSize, setFontSize ] = useState( options[ 0 ] );\r",
      "\treturn (\r",
      "\t\t<CustomSelectControl\r",
      "\t\t\tlabel=\"Font Size\"\r",
      "\t\t\toptions={ options }\r",
      "\t\t\tonChange={ ( { selectedItem } ) => setFontSize( selectedItem ) }\r",
      "\t\t\tvalue={ options.find( ( option ) => option.key === fontSize.key ) }\r",
      "\t\t/>\r",
      "\t);\r",
      "}"
    ]
  },
  "Dashicon": {
    "prefix": [
      "wp.components",
      "components",
      "Dashicon"
    ],
    "description": "add description",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/dashicon\r",
      "\r",
      "import { Dashicon } from '@wordpress/components';\r",
      "\r",
      "const MyDashicon = () => (\r",
      "\t<div>\r",
      "\t\t<Dashicon icon=\"admin-home\" />\r",
      "\t\t<Dashicon icon=\"products\" />\r",
      "\t\t<Dashicon icon=\"wordpress\" />\r",
      "\t</div>\r",
      ");"
    ]
  },
  "DateTimePicker": {
    "prefix": [
      "wp.components",
      "components",
      "DateTimePicker"
    ],
    "description": "DateTimePicker is a React component that renders a calendar and clock for date and time selection. The calendar and clock components can be accessed individually using the DatePicker and TimePicker components respectively.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/date-time\r",
      "\r",
      "import { DateTimePicker } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const MyDateTimePicker = () => {\r",
      "\tconst [ date, setDate ] = useState( new Date() );\r",
      "\r",
      "\treturn (\r",
      "\t\t<DateTimePicker\r",
      "\t\t\tcurrentDate={ date }\r",
      "\t\t\tonChange={ ( newDate ) => setDate( newDate ) }\r",
      "\t\t\tis12Hour={ true }\r",
      "\t\t/>\r",
      "\t);\r",
      "}"
    ]
  },
  "Disabled": {
    "prefix": [
      "wp.components",
      "components",
      "Disabled"
    ],
    "description": "Disabled is a component which disables descendant tabbable elements and prevents pointer interaction.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/disabled\r",
      "\r",
      "import { Button, Disabled, TextControl } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const MyDisabled = () => {\r",
      "\tconst [ isDisabled, setIsDisabled ] = useState( true );\r",
      "\r",
      "\tlet input = <TextControl label=\"Input\" onChange={ () => {} } />;\r",
      "\tif ( isDisabled ) {\r",
      "\t\tinput = <Disabled>{ input }</Disabled>;\r",
      "\t}\r",
      "\r",
      "\tconst toggleDisabled = () => {\r",
      "\t\tsetIsDisabled( ( state ) => ! state );\r",
      "\t};\r",
      "\r",
      "\treturn (\r",
      "\t\t<div>\r",
      "\t\t\t{ input }\r",
      "\t\t\t<Button variant=\"primary\" onClick={ toggleDisabled }>\r",
      "\t\t\t\tToggle Disabled\r",
      "\t\t\t</Button>\r",
      "\t\t</div>\r",
      "\t);\r",
      "};"
    ]
  },
  "Draggable": {
    "prefix": [
      "wp.components",
      "components",
      "Draggable"
    ],
    "description": "Draggable is a Component that provides a way to set up a a cross-browser (including IE) customisable drag image and the transfer data for the drag event. It decouples the drag handle and the element to drag. Use it by wrapping the component that will become the drag handle and providing the DOM ID of the element to drag.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/draggable\r",
      "\r",
      "import { Draggable, Panel, PanelBody } from '@wordpress/components';\r",
      "import { Icon, more } from '@wordpress/icons';\r",
      "\r",
      "const MyDraggable = () => (\r",
      "\t<div id=\"draggable-panel\">\r",
      "\t\t<Panel header=\"Draggable panel\">\r",
      "\t\t\t<PanelBody>\r",
      "\t\t\t\t<Draggable elementId=\"draggable-panel\" transferData={ {} }>\r",
      "\t\t\t\t\t{ ( { onDraggableStart, onDraggableEnd } ) => (\r",
      "\t\t\t\t\t\t<div\r",
      "\t\t\t\t\t\t\tclassName=\"example-drag-handle\"\r",
      "\t\t\t\t\t\t\tdraggable\r",
      "\t\t\t\t\t\t\tonDragStart={ onDraggableStart }\r",
      "\t\t\t\t\t\t\tonDragEnd={ onDraggableEnd }\r",
      "\t\t\t\t\t\t>\r",
      "\t\t\t\t\t\t\t<Icon icon={ more } />\r",
      "\t\t\t\t\t\t</div>\r",
      "\t\t\t\t\t) }\r",
      "\t\t\t\t</Draggable>\r",
      "\t\t\t</PanelBody>\r",
      "\t\t</Panel>\r",
      "\t</div>\r",
      ");"
    ]
  },
  "DropdownMenu": {
    "prefix": [
      "wp.components",
      "components",
      "DropdownMenu"
    ],
    "description": "The DropdownMenu displays a list of actions (each contained in a MenuItem, MenuItemsChoice, or MenuGroup) in a compact way. It appears in a Popover after the user has interacted with an element (a button or icon) or when they perform a specific action.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/dropdown-menu\r",
      "\r",
      "import { DropdownMenu } from '@wordpress/components';\r",
      "import {\r",
      "\tmore,\r",
      "\tarrowLeft,\r",
      "\tarrowRight,\r",
      "\tarrowUp,\r",
      "\tarrowDown,\r",
      "} from '@wordpress/icons';\r",
      "\r",
      "const MyDropdownMenu = () => (\r",
      "\t<DropdownMenu\r",
      "\t\ticon={ more }\r",
      "\t\tlabel=\"Select a direction\"\r",
      "\t\tcontrols={ [\r",
      "\t\t\t{\r",
      "\t\t\t\ttitle: 'Up',\r",
      "\t\t\t\ticon: arrowUp,\r",
      "\t\t\t\tonClick: () => console.log( 'up' ),\r",
      "\t\t\t},\r",
      "\t\t\t{\r",
      "\t\t\t\ttitle: 'Right',\r",
      "\t\t\t\ticon: arrowRight,\r",
      "\t\t\t\tonClick: () => console.log( 'right' ),\r",
      "\t\t\t},\r",
      "\t\t\t{\r",
      "\t\t\t\ttitle: 'Down',\r",
      "\t\t\t\ticon: arrowDown,\r",
      "\t\t\t\tonClick: () => console.log( 'down' ),\r",
      "\t\t\t},\r",
      "\t\t\t{\r",
      "\t\t\t\ttitle: 'Left',\r",
      "\t\t\t\ticon: arrowLeft,\r",
      "\t\t\t\tonClick: () => console.log( 'left' ),\r",
      "\t\t\t},\r",
      "\t\t] }\r",
      "\t/>\r",
      ");"
    ]
  },
  "Dropdown": {
    "prefix": [
      "wp.components",
      "components",
      "Dropdown"
    ],
    "description": "Dropdown is a React component to render a button that opens a floating content modal when clicked.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/dropdown\r",
      "\r",
      "import { Button, Dropdown } from '@wordpress/components';\r",
      "\r",
      "const MyDropdown = () => (\r",
      "\t<Dropdown\r",
      "\t\tclassName=\"my-container-class-name\"\r",
      "\t\tcontentClassName=\"my-popover-content-classname\"\r",
      "\t\tposition=\"bottom right\"\r",
      "\t\trenderToggle={ ( { isOpen, onToggle } ) => (\r",
      "\t\t\t<Button\r",
      "\t\t\t\tvariant=\"primary\"\r",
      "\t\t\t\tonClick={ onToggle }\r",
      "\t\t\t\taria-expanded={ isOpen }\r",
      "\t\t\t>\r",
      "\t\t\t\tToggle Popover!\r",
      "\t\t\t</Button>\r",
      "\t\t) }\r",
      "\t\trenderContent={ () => <div>This is the content of the popover.</div> }\r",
      "\t/>\r",
      ");"
    ]
  },
  "Dropzone": {
    "prefix": [
      "wp.components",
      "components",
      "Dropzone"
    ],
    "description": "DropZone is a Component creating a drop zone area taking the full size of its parent element. It supports dropping files, HTML content or any other HTML drop event.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/drop-zone\r",
      "\r",
      "import { DropZone } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const MyDropZone = () => {\r",
      "\tconst [ hasDropped, setHasDropped ] = useState( false );\r",
      "\r",
      "\treturn (\r",
      "\t\t<div>\r",
      "\t\t\t{ hasDropped ? 'Dropped!' : 'Drop something here' }\r",
      "\t\t\t<DropZone\r",
      "\t\t\t\tonFilesDrop={ () => setHasDropped( true ) }\r",
      "\t\t\t\tonHTMLDrop={ () => setHasDropped( true ) }\r",
      "\t\t\t\tonDrop={ () => setHasDropped( true ) }\r",
      "\t\t\t/>\r",
      "\t\t</div>\r",
      "\t);\r",
      "}"
    ]
  },
  "DuotonePicker & DuotoneSwatch": {
    "prefix": [
      "wp.components",
      "components",
      "DuotonePicker",
      "DuotoneSwatch"
    ],
    "description": "add description",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/duotone-picker\r",
      "\r",
      "import { DuotonePicker, DuotoneSwatch } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const DUOTONE_PALETTE = [\r",
      "\t{ colors: [ '#8c00b7', '#fcff41' ], name: 'Purple and yellow', slug: 'purple-yellow' },\r",
      "\t{ colors: [ '#000097', '#ff4747' ], name: 'Blue and red', slug: 'blue-red' },\r",
      "];\r",
      "\r",
      "const COLOR_PALETTE = [\r",
      "\t{ color: '#ff4747', name: 'Red', slug: 'red' },\r",
      "\t{ color: '#fcff41', name: 'Yellow', slug: 'yellow' },\r",
      "\t{ color: '#000097', name: 'Blue', slug: 'blue' },\r",
      "\t{ color: '#8c00b7', name: 'Purple', slug: 'purple' },\r",
      "];\r",
      "\r",
      "const Example = () => {\r",
      "\tconst [ duotone, setDuotone ] = useState( [ '#000000', '#ffffff' ] );\r",
      "\treturn (\r",
      "\t\t<>\r",
      "\t\t\t<DuotoneControl\r",
      "\t\t\t\tduotonePalette={ DUOTONE_PALETTE }\r",
      "\t\t\t\tcolorPalette={ COLOR_PALETTE }\r",
      "\t\t\t\tvalue={ duotone }\r",
      "\t\t\t\tonChange={ setDuotone }\r",
      "\t\t\t/>\r",
      "\t\t\t<DuotoneSwatch values={ duotone } />\r",
      "\t\t</>\r",
      "\t);\r",
      "};\r",
      "`"
    ]
  },
  "ExternalLink": {
    "prefix": [
      "wp.components",
      "components",
      "ExternalLink"
    ],
    "description": "add description",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/external-link\r",
      "\r",
      "import { ExternalLink } from '@wordpress/components';\r",
      "\r",
      "const MyExternalLink = () => (\r",
      "\t<ExternalLink href=\"https://wordpress.org\">WordPress.org</ExternalLink>\r",
      ");"
    ]
  },
  "FocalPointPicker": {
    "prefix": [
      "wp.components",
      "components",
      "FocalPointPicker"
    ],
    "description": "Focal Point Picker is a component which creates a UI for identifying the most important visual point of an image.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/focal-point-picker\r",
      "\r",
      "import { FocalPointPicker } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const Example = () => {\r",
      "\tconst [ focalPoint, setFocalPoint ] = useState( {\r",
      "\t\tx: 0.5,\r",
      "\t\ty: 0.5,\r",
      "\t} );\r",
      "\r",
      "\tconst url = '/path/to/image';\r",
      "\tconst dimensions = {\r",
      "\t\twidth: 400,\r",
      "\t\theight: 100,\r",
      "\t};\r",
      "\r",
      "\t/* Example function to render the CSS styles based on Focal Point Picker value */\r",
      "\tconst style = {\r",
      "\t\tbackgroundImage: `url(${ url })`,\r",
      "\t\tbackgroundPosition: `${ focalPoint.x * 100 }% ${ focalPoint.y * 100 }%`,\r",
      "\t};\r",
      "\r",
      "\treturn (\r",
      "\t\t<>\r",
      "\t\t\t<FocalPointPicker\r",
      "\t\t\t\turl={ url }\r",
      "\t\t\t\tdimensions={ dimensions }\r",
      "\t\t\t\tvalue={ focalPoint }\r",
      "\t\t\t\tonChange={ ( focalPoint ) => setFocalPoint( { focalPoint } ) }\r",
      "\t\t\t/>\r",
      "\t\t\t<div style={ style } />\r",
      "\t\t</>\r",
      "\t);\r",
      "};"
    ]
  },
  "FontSizePicker": {
    "prefix": [
      "wp.components",
      "components",
      "FontSizePicker"
    ],
    "description": "FontSizePicker is a React component that renders a UI that allows users to select a font size",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/font-size-picker\r",
      "\r",
      "import { FontSizePicker } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "import { __ } from '@wordpress/i18n';\r",
      "\r",
      "const fontSizes = [\r",
      "\t{\r",
      "\t\tname: __( 'Small' ),\r",
      "\t\tslug: 'small',\r",
      "\t\tsize: 12,\r",
      "\t},\r",
      "\t{\r",
      "\t\tname: __( 'Big' ),\r",
      "\t\tslug: 'big',\r",
      "\t\tsize: 26,\r",
      "\t},\r",
      "];\r",
      "const fallbackFontSize = 16;\r",
      "\r",
      "const MyFontSizePicker = () => {\r",
      "\tconst [ fontSize, setFontSize ] = useState( 12 );\r",
      "\r",
      "\treturn (\r",
      "\t\t<FontSizePicker\r",
      "\t\t\tfontSizes={ fontSizes }\r",
      "\t\t\tvalue={ fontSize }\r",
      "\t\t\tfallbackFontSize={ fallbackFontSize }\r",
      "\t\t\tonChange={ ( newFontSize ) => {\r",
      "\t\t\t\tsetFontSize( newFontSize );\r",
      "\t\t\t} }\r",
      "\t\t/>\r",
      "\t);\r",
      "};\r",
      "\r",
      "...\r",
      "\r",
      "<MyFontSizePicker />"
    ]
  },
  "FormFileUpload": {
    "prefix": [
      "wp.components",
      "components",
      "FormFileUpload"
    ],
    "description": "Renders a FormFileUpload",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/form-file-upload\r",
      "\r",
      "import { FormFileUpload } from '@wordpress/components';\r",
      "\r",
      "const MyFormFileUpload = () => (\r",
      "\t<FormFileUpload\r",
      "\t\taccept=\"image/*\"\r",
      "\t\tonChange={ () => console.log( 'new image' ) }\r",
      "\t>\r",
      "\t\tUpload\r",
      "\t</FormFileUpload>\r",
      ");"
    ]
  },
  "FormToggle": {
    "prefix": [
      "wp.components",
      "components",
      "FormToggle"
    ],
    "description": "Renders a FormToggle",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/form-toggle\r",
      "\r",
      "import { FormToggle } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const MyFormToggle = () => {\r",
      "\tconst [ isChecked, setChecked ] = useState( true );\r",
      "\r",
      "\t<FormToggle\r",
      "\t\tchecked={ checked }\r",
      "\t\tonChange={ () => setChecked( ( state ) => ! state ) }\r",
      "\t/>\r",
      "};"
    ]
  },
  "FormTokenField": {
    "prefix": [
      "wp.components",
      "components",
      "FormTokenField"
    ],
    "description": "A FormTokenField is a field similar to the tags and categories fields in the interim editor chrome, or the \"to\" field in Mail on OS X. Tokens can be entered by typing them or selecting them from a list of suggested tokens.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/form-token-field\r",
      "\r",
      "import { FormTokenField } from '@wordpress/components';\r",
      "import { useState } from '@wordpress/element';\r",
      "\r",
      "const continents = [\r",
      "\t'Africa',\r",
      "\t'America',\r",
      "\t'Antarctica',\r",
      "\t'Asia',\r",
      "\t'Europe',\r",
      "\t'Oceania',\r",
      "];\r",
      "\r",
      "const MyFormTokenField = () => {\r",
      "\tconst [ selectedContinents, setSelectedContinents ] = useState( [] );\r",
      "\r",
      "\treturn(\r",
      "\t\t<FormTokenField\r",
      "\t\t\tvalue={ selectedContinents }\r",
      "\t\t\tsuggestions={ continents }\r",
      "\t\t\tonChange={ ( tokens ) => setSelectedContinents( tokens ) }\r",
      "\t\t/>\r",
      "\t);\r",
      "};"
    ]
  },
  "Guide": {
    "prefix": [
      "wp.components",
      "components",
      "Guide"
    ],
    "description": "Guide is a React component that renders a user guide in a modal.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/guide\r",
      "\r",
      "function MyTutorial() {\r",
      "\tconst [ isOpen, setIsOpen ] = useState( true );\r",
      "\r",
      "\tif ( ! isOpen ) {\r",
      "\t\treturn null;\r",
      "\t}\r",
      "\r",
      "\treturn (\r",
      "\t\t<Guide\r",
      "\t\t\tonFinish={ () => setIsOpen( false ) }\r",
      "\t\t\tpages={ [\r",
      "\t\t\t\t{\r",
      "\t\t\t\t\tcontent: <p>Welcome to the ACME Store!</p>,\r",
      "\t\t\t\t},\r",
      "\t\t\t\t{\r",
      "\t\t\t\t\timage: <img src=\"https://acmestore.com/add-to-cart.png\" />,\r",
      "\t\t\t\t\tcontent: (\r",
      "\t\t\t\t\t\t<p>\r",
      "\t\t\t\t\t\t\tClick <i>Add to Cart</i> to buy a product.\r",
      "\t\t\t\t\t\t</p>\r",
      "\t\t\t\t\t),\r",
      "\t\t\t\t},\r",
      "\t\t\t] }\r",
      "\t\t/>\r",
      "\t);\r",
      "}"
    ]
  },
  "PanelBody": {
    "prefix": [
      "rw",
      "wp_components",
      "PanelBody"
    ],
    "description": "The PanelBody creates a collapsible container that can be toggled open or closed.",
    "body": [
      "import { PanelBody} from '@wordpress/components';\r",
      "\r",
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/panel#panelbody\r",
      "\r",
      "<PanelBody\r",
      "\t${1:title=\"${2:Panel Title}\"}\r",
      "\t${3:opened}\r",
      "\t${4:className=\"${5:panel-body-class}\"}\r",
      "\t${6:icon=\"${7:smiley}\"}\r",
      "\t${8:onToggle={() => {console.log('Toggled');}}}\r",
      "\t${9:initialOpen={${10:true|false}}}\r",
      "\t${11:children={(opened) => {console.log(opened);}}}\r",
      "\t${12:buttonProps={${13:{}}}}\r",
      "\t>\r",
      "\t\t$TM_SELECTED_TEXT\r",
      "</PanelBody>"
    ]
  }
}